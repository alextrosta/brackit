COMP 3004 - Deliverable #3
System Architecture and Design
Brackit - Mobile Tournament Bracket Creation
Metadata
Team / App Name: Brackit
Team member names
Name
Jaime Herzog
Suohong Liu
Xiyi Liu
Alex Trostanovsky

Student ID
101009321
101002340
101004577
100984702

Contents
1 Architecture
1.1 Description . . . . . . . . . . . . . . . . . . . . . .
1.1.1 Functional & Non-Functional Requirements
1.2 Justification of Architectural Style Choices . . . .
1.2.1 Object-Oriented Architectural Style . . . .
1.2.2 Client-Server Architectural Style . . . . . .
1.3 Architectural Diagrams . . . . . . . . . . . . . . .
1.3.1 UML 2 Architectural Component Diagram
1.3.2 ER Diagram . . . . . . . . . . . . . . . . .

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

2
2
2
2
2
3
4
4
5

2 Design
2.1 Description and Justification of Design Patterns .
2.2 Implementation Analysis . . . . . . . . . . . . . .
2.3 Integration and Coupling Challenges . . . . . . .
2.4 Suggestions for Future Work . . . . . . . . . . .
2.5 Design Diagrams . . . . . . . . . . . . . . . . . .
2.5.1 UML Class Diagram . . . . . . . . . . . .
2.5.2 Create Tournament Sequence Diagram .

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.
.
.
.

6
6
6
6
7
8
8
9

3 Assignment of Tasks

.
.
.
.
.
.
.

10

1

Architecture
1.1
1.1.1

Description
Functional & Non-Functional Requirements

Brackit addresses an urgent need by tournament organizers and attendants to visualize, manage, and interact with
double elimination brackets on their mobile devices. At a high level, we committed to developing a product that will
meet the following functional requirements:
1. Tournament Organizers (TO’s) can create, host, maintain, and visualize double elimination brackets.
2. Registered Brackit Users, as well as Guests, can use the application to join created tournaments.
3. Brackit will store and maintain user profiles that will describe users’ past performance. For example:
• Matches won/lost
• Tournaments entered/created
In terms of non-functional requirements, we believed Brackit should be usable on mobile devices. Brackit
users should be able to:
• View and access all components (Brackets, Rounds, Matches) of a tournament on an Android device.
• Seamlessly enter tournament competitors to brackets on an Android device.
Conceptually, Brackit needed to support the creation and maintenance of the following components:
• Tournament: The highest level of abstraction utilized in Bracket creation. A tournament acts as a container
for brackets. Brackit supports double-elimination tournaments, where competitors cease to be eligible to win
the tournament after losing two matches [1].
• Bracket: Given the number of entrants and their corresponding seeds (ranks), Double elimination brackets
dictate competitor matchups and the progression of competitors through the Winners and Losers brackets.
Brackets contain a dynamic list of Rounds.
• Round : Rounds contain a dynamic list of Matches.
• Match: Matches pair the strongest and corresponding weakest players in a Round according to rank. (That
is, in a tournament containing n players, the top (1st ) ranked player will be matched with the lowest (n − 1)
ranked player, the 2nd ranked player will be matched with the n − 2 ranked player, etc.)

1.2
1.2.1

Justification of Architectural Style Choices
Object-Oriented Architectural Style

As described above, a Double Elimination Tournament mobile management application must maintain a set of welldefined entities (i.e. a Tournaments, Brackets, Rounds, and Matches) with predetermined relationships. For example,
given n competitors, a correct double elimination tournament will contain dlg ne rounds in the Winners bracket and
dlg ne + dlg lg ne rounds in the Losers bracket [2]. In addition, the progression of competitors can be calculated at
the creation of a tournament, and handling this progression follows a deterministic approach (e.g. The winner of
Match 1 of Round 1 in the Winners Bracket will always progress to Match 1 Round 2 in the Winners Bracket - see
Figure 1 for an illustrative example).
Therefore, to encourage an efficient decomposition of the algorithm and entities associated with Double Elimination
Tournament management, we decided to model the architecture of Brackit using an Object-Oriented (OO)
architecture. Specifically, we chose to model each of the components of our application as objects. This allowed us
to encapsulate the expected behaviour of each of the tournament objects while maintaining a valid separation of
concerns. To explicate the validity of the choice of an OO architecture for Brackit consider the dynamic nature of
Tournament creation.
A tournament bracket acts as a container for rounds, which themselves act as containers for matches. To handle
tournament progression, the data associated with each match (i.e. which competitor won or lost) should be selfcontained within the match object instantiation, but also must be accessible through attributes of that object.
2

Defining the Match construct as an object enables self-contained class methods and attributes that achieve these
intended behaviours. At the same time, setting the Win / Loss attribute of a match as publicly visible allowed us to
develop querying strategies that can provide score summaries for participating users.
Losers
Bracket

Match

Winners
Bracket

Rank of Entrant 1
1
Rank of Entrant 2
8
L1
6
L1 Loser

3
L3
5
4

Winner of
this Match
goes to
Winners
Bracket

Loser of
this Match
comes in
3rd Place

Champion

L2
7
L2 Loser

2
Winner of Losers Bracket

L3 Loser

Must beat Winner of
Winners Bracket Twice

Figure 1: Seeded Double Elimination Tournament Chart for 8 competitors. (Adapted from [3])

1.2.2

Client-Server Architectural Style

A client-server architecture dictates that a server host, deliver, and manage most of the resources and services that
clients can consume. Client-server architectures are used in situations where a separation of concerns exists between
the client and server. The modularity inherent in this style lends itself to to the development of scalable software [4].
We decided to follow the guidelines set out by the Client-Server Architectural Style because we believed Brackit
should provide the following core features: Double Elimination bracket algorithm execution, tournament management, and user registration and maintenance. Since we committed to providing these functionalities to both registered
and guest users, it was natural to model the users of our application as clients that interact with the available features. In addition, since we did not intend on developing a platform where the communication between users is
central (for example, in the form of chats, or message sharing, between users of Brackit), desigining Brackit as a
Restful-API [5] Client-Server model was sufficient to provide the functionalities we committed to.
Finally, using a client-server model will allow planned revisions and upgrades to Tournament Management and Creation to be easily integrated into the codebase (See Section 2.4 for detailed description of what we plan next for
Brackit). Once a feature and the corresponding frontend client code are tested, they can be incorporated via an
update on our users’ Android devices. This will allow users to access the new feature(s). That is, using a ClientServer model allows us to ensure that Brackit will continue to innovate, progress, and scale by providing users with
new and exciting functionalities and behaviours.

3

1.3
1.3.1

Architectural Diagrams
UML 2 Architectural Component Diagram

DataAccess
Android

Tournament

Tournament

«UI»
Tournament Creation and
Progression Handling

«infrastructure»
Security

Derived
From

Authentication &
Access Control

DataAccess

«UI»
Tournament Registration

SHA256
Password
Encryption

Lobby

Lobby

«infrastructure»
Persistence

«UI»
Query Historical
Performance Data

Persistence

<<requires>>

DataAccess
User
User
«database»
SQLite3 DB

Thanks to http://agilemodeling.com/artifacts/componentDiagram.htm

Figure 2: Brackit - UML 2 Architectural Component Diagram

4

SQLAlchemy

1.3.2

ER Diagram

Lobby
PK

id

lobby_seeds
PK

id

User
PK

id

tournament_name

user_id

role

tournament_id

lobby_id

username

to_id

seed

email
password_hash

Tournament
PK

id

Bracket
PK

id

Match
PK

id

n_entrants

bracket_type

uuid

name

tournament_id

user_1

organizer_id

user_1_score

finished

user_2

Round
PK

user_2_score

id

winner

number

winner_advance_to

winners

loser_advance_to

Figure 3: Brackit - Entity-Relationship (ER) Diagram

5

Design
2.1

Description and Justification of Design Patterns

1. Facade
The Facade pattern intends to provide a unified interface to a set of interfaces in a subsystem. For our backend,
the API endpoints contained in the routes module constitute our Facade. Each endpoint provides a URL which
the user can access to invoke all necessary interfaces to execute the necessary code in the backend.
This pattern provides a singular hub through which frontend clients can access backend data. Modelling our
server as a Facade centralized all exposed endpoints and allowed for ease of use and extensibility.
2. Singleton
The Singleton pattern intends to ensure a class has only one instance and to allow global access to that class.
The Flask app object leverages the Singleton pattern in its design. It is instantiated only once when the server
is started, and is accessed globally throughout the backend.
A Singleton design pattern for the app object is an appropriate choice because when the app class is instantiated,
it acts as a representation of the Flask server at compile-time. This representation encapsulates all current
server modifications and customizations by specifying the database schema, API endpoints, as well as any
backend refactoring. Correspondingly, this guarantees that the app is only instantiated once. This maintains
consistency throughout a session, and mitigates the possibility that multiple clients create duplicate endpoints,
which would result in unintentional behaviour such as the inconsistent method invocations.

2.2

Implementation Analysis

The Brackit backend was designed primarily to marry extensibility with the correctness of our relatively complex
domain. The main challenge of the backend’s design is the creation of correct brackets, as well as the maintenance
of brackets as they progress to completion. When a user creates a Tournament, Brackit initializes a tournament
object in the backend, which itself creates the bracket objects. Depending on the bracket type, the appropriate
number of rounds are created, with each round containing the corresponding number of matches. This is handled
automatically because the number of rounds is deterministic with respect to the number of entrants and the type of
bracket (See Section 1.2.1).
Our backend uses the Flask python package to expose our bracket and user information to the frontend, as well as
SQLAlchemy to manage this information in the database. SQLAlchemy provides a Model baseclass that allows us to
declare the tournament objects as database tables and a runtime interface by which we interact with our SQLite3
database. We model each class in our class diagram in the models module, which creates tables for each class and
defines the table relationships in an object-oriented style. This allows us to easily and safely query the database
when invoking APIs and enables retrieval of the specific object being requested. Additionally, these models allow for
seamless SQL querying for user data, such as users’ cross-tournament wins and losses.

2.3

Integration and Coupling Challenges

As a consequence of utilizing SQLAlchemy model our classes in the database, we produced three layers of abstraction
in our application:
• the Routes layer, i.e. our API Facade,
• the Model layer, and
• the Backend layer, where bracket generation and progression handling logic is stored.
This created some significant challenges when designing for decoupling. When we query the tables for requested
objects in the Routes layer, we return the Model objects and not the Backend objects. Accessing Backend objects
after instantiation in the Routes layer became a significant challenge. We addressed this by moving the logic for
inputting match results directly into the Model layer, as that is the layer responsible for the representation of the
objects in the database.
Also, we experimented with each class in the Model layer containing its corresponding Backend object as an attribute.
However, because the Tournament object in the Backend instantiates its child objects such as the Bracket, Rounds,
and Matches during initialization, it became impossible to map one to the other fully. This problem would be another

6

area of future evolution for our system.
The final challenge we’ll discuss relates to the encapsulation of user data within match objects (i.e. handling how
matches “know” which entrants are participating in said matches) . This is known as progression handling. For
matches in the initial rounds, progression handling and placement are trivial since the entrants are placed into the
matches in the first round when the Tournament is instantiated. However, as the tournament progresses, the client
must POST win, loss, and progression data to the backend. When the results of a match are reported, Brackit
must determine where the winner and loser progress to.
To address this, we explored the use of pointers that correspond to each entrant in subsequent matches. However,
it became challenging to ensure that as the tournament progressed and pointers were instantiated with user data,
the database reflected these changes. Ultimately, we decided to store references to two other match objects within a
Match (loserPlaysInMatch and winnerPlaysInMatch). These attributes reference the matches that the loser and
winner progress to. This approach simplified database representation and enabled intuitive bracket navigation on
the frontend. That is, by inspecting a match’s attributes, one could find subsequent matches in the tournament.

2.4

Suggestions for Future Work

So far, Brackit only supports double elimination brackets, but this can be expanded easily by the addition of special
cases in the Bracket constructor. An alternative approach would be to create an abstract Bracket class with each
bracket type as an extension of the abstract Bracket class. This may allow for code that is readable and iterable and
would be worth the refactoring time if this project were to be expanded.
We also plan to streamline user entry to tournaments via their pre-registered Brackit accounts using a QR code for
a given tournament that, when read, automatically enters the user into the tournament lobby. Our choices of the
Facade Design pattern coupled with our Object-Oriented and Server-Client Architecture will facilitate the integration
of this new feature. Specifically, by modelling a Tournament as an object, we can add an additional uuid attribute
that enables unique QR code generation and matching. Once this feature is supported, further frontend functionality
will be needed to display a QR code from the /api/lobby/<int:lobby id>/add-user/ endpoint, as well QR Code
recognition from an additional API endpoint.

7

2.5
2.5.1

Design Diagrams
UML Class Diagram

Thanks to http://agilemodeling.com/artifacts/classDiagram.htm#CompositionAssociations
1..*

Tournament
bracket

Match
entrant1 : int
entrant2 : int

post_to_db()
1

loserPlayInMatch : int
matchRound : int
scoreEntrant1 : int

1..*

scoreEntrant2 : int

Bracket
bracketType

uuid : string

ceilPlayers : int

winner : int

entrants : list

winnerPlaysInMatch : int

numLosersRounds : int

inputScore()

numTotalRounds : int

loserPlaysInMatch()

numWinnersRounds : int

post_self_refs()

rounds : list

post_to_db()

makeDoubleElimBracket(

proceedToMatch()

post_to_db()
1

winnerPlaysInMatch()
1

2
User

1..*
Round

brackets : list

bracket : Bracket

email : string

isWinners : Bool

id : int

matches : list

last_seen : Datetime

numMatches : int

password_hash : string

number : int

role : string

handleProgression()

username : string

post_to_db()

1

avatar()
check_password()
generate_auth_token()
set_password()
verify_auth_token()%3CmxGra

Figure 4: Brackit - UML Class Diagram

8

2.5.2

Create Tournament Sequence Diagram

Create Tournament

Client Side (Kotlin for Android)
Route

Server Side (Flask, SQLAlchemy)

CreateTournamentActivity
Kotlin Controller

View

Flask Endpoint

Database

Models

SQLite3

/api/created-tournaments
Redirect to view
Controller Interaction

HTTP Post Request to
/api/created-tournaments

Tournament Object
Instantiation

Request Abstracted using
SQLAlchemy's ORM

callback
Render Response Content

JSON response

View Display

Figure 5: Brackit:

Create Tournament Sequence Diagram

9

Commit and
Update Session

Assignment of Tasks
• Jaime Herzog, 101009321:
– Report:
∗ Sections 2.1-2.4
– Brackit:
∗
∗
∗
∗

Backend Layer
Algorithm for generation of double elimination brackets
Progression Handling
winsAndLosses endpoint - Performance Metrics Endpoint

• Suohong Liu, 101002340:
– Report:
∗
– Brackit:
∗
• Xiyi Liu, 101004577:
– Report:
∗
– Brackit:
∗
• Alex Trostanovsky, 100984702:
– Report:
∗ LATEXCompilation
∗ Figures 1-5
∗ Sections 1.1-1.2
– Brackit:
∗
∗
∗
∗

Models, Routes Layers
SQLite3 Database Initialization, Migration
Mock data population scripts
Endpoints testing and implementation

10

References
[1] Wikipedia. Double-elimination tournament — Wikipedia, the free encyclopedia, 6-October-2019. [Online; accessed 14-March-2020].
[2] gottfriedville. Double Elimination - How many rounds ? Blog Post. [Online; accessed 15-March-2020].
[3] candied-orange (https://softwareengineering.stackexchange.com/users/131624/candied orange).
bracket algorithm. Software Engineering. [Online; accessed 14-March-2020].

Tournament

[4] Mei Nagappan, Achyudh Ram Keshav Ram, Aswin Vayiravan, Wenhan Zhu. Lecture notes in software design
and architectures, July 2019.
[5] REST API Tutorial. https://restfulapi.net/. Accessed: 2020-03-15.

11

